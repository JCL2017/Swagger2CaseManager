from requests_toolbelt import MultipartEncoderimport osdef formdata_encoder(urlencoded_data):    fields = {}    for key, value in urlencoded_data.items():        if isinstance(value, list):            file_path, file_type = value            if not os.path.isabs(file_path):                file_path = os.path.join(os.getcwd(), file_path)            filename = os.path.basename(file_path)            with open(file_path, 'rb') as f:                fields.update({key: (filename, f.read(), file_type)})        else:            fields.update({key: value})    return MultipartEncoder(fields)username = os.environ["username"]password = os.environ["password"]base_url = os.environ["base_url"]import hmacimport hashlibimport timedef gen_timestamp():    return str(int(time.time()))def auth_sign(product_key, device_name, method, key, timestamp):    auth = {}    sign_cont = ""    # auth["timestamp"] = time.strftime("%Y:%m:%d %H:%M:%S")    auth["timestamp"] = timestamp    # auth["timestamp"] = 1536020846562    # Add device info    auth["productKey"] = product_key    auth["deviceName"] = device_name    auth["signmethod"] = method    # Add the sign dict    # auth.update(sign_dict)    sign_keys = list(auth.keys())    # the keys is ordered by first alphabet, and compose the sign content    sign_keys.sort(key=lambda item: item.lower())    for item in sign_keys:        if item == "signmethod":            continue        sign_cont += item + str(auth[item])    print(sign_cont)    sign_cont = sign_cont.encode("utf-8")    # load the key    # secret_key = base64.b64decode(key.encode("utf-8"))    secret_key = bytearray.fromhex(key)    print(secret_key.hex())    # make signature    if method == "HmacSHA1":        signature = hmac.new(secret_key, sign_cont, hashlib.sha1).hexdigest()        # signature = base64.b64encode(signature).decode("utf-8")    elif method == "HmacMD5":        signature = hmac.new(secret_key, sign_cont, hashlib.md5).hexdigest()        # signature = base64.b64encode(signature).decode("utf-8")    else:        signature = hmac.new(secret_key, sign_cont, hashlib.sha256).hexdigest()        # signature = base64.b64encode(signature).decode("utf-8")    auth["sign"] = signature    return signature